/* 
  NOT FINAL CODE, THIS IS A PRE-RELEASE VERSION
*/

use std::io;
use rand::Rng;

struct Character {
    name: String,
    health: i32,
    damage: i32,
}

impl Character {
    fn attack(&self, other: &mut Character) {
        let player_roll = rand::thread_rng().gen_range(1..21); // roll a d20
        let enemy_roll = rand::thread_rng().gen_range(1..21); // roll a d20
        let player_total_damage = self.damage + player_roll; // add the roll to the base damage
        let enemy_total_damage = other.damage + enemy_roll; // add the roll to the base damage
        println!("{} attacks {} with a roll of {}!", self.name, other.name, player_roll);
        other.health -= player_total_damage;
        println!("{} takes {} damage.", other.name, player_total_damage);
        if other.health <= 0 {
            println!("{} has been defeated!", other.name);
        }
        println!("{} attacks {} with a roll of {}!", other.name, self.name, enemy_roll);
        self.health -= enemy_total_damage;
        println!("{} takes {} damage.", self.name, enemy_total_damage);
        if self.health <= 0 {
            println!("{} has been defeated!", self.name);
        }
    }
}


fn combat() {
    let mut player = Character {
        name: String::from("Player"),
        health: 100,
        damage: 20,
    };

    let mut enemy = Character {
        name: String::from("Enemy"),
        health: 80,
        damage: 15,
    };

    println!("A wild {} appears!", enemy.name);

    loop {
        println!("1. Attack");
        println!("2. Run");

        let mut choice = String::new();
        io::stdin().read_line(&mut choice)
            .expect("Failed to read line");

        match choice.trim() {
            "1" => {
                player.attack(&mut enemy);
                if enemy.health <= 0 {
                    println!("You win!");
                    break;
                }
                enemy.attack(&mut player);
                if player.health <= 0 {
                    println!("You have been defeated!");
                    break;
                }
            },
            "2" => {
                println!("Ran away!");
                break;
            }
            _ => println!("Invalid option. Please try again."),
        }
    }
}

fn main() {
    loop {
        println!("Welcome to the D&D Game!");
        println!("1. Start Game");
        println!("2. Shop");
        println!("3. Exit");

        let mut choice = String::new();
        io::stdin().read_line(&mut choice)
            .expect("Failed to read line");

        match choice.trim() {
            "1" => combat(),
            "2" => store(),
            "3" => {
                println!("Exiting the game. Goodbye!");
                break;
            },
            _ => println!("Invalid option. Please try again."),
        }
    }
}

fn store() {
    println!("Welcome to the shop!");
      
}
